// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Auth {
  id           String   @id @unique @default(uuid())
  accessToken  String
  refreshToken String
  expiryDate   DateTime
  userId       String
  user         Users    @relation(name: "auth", fields: [userId], references: [id])
}

model Users {
  id           String   @id @default(uuid())
  firstName    String
  lastName     String
  email        String   @unique
  password     String
  phoneNumber  String
  role         UserRole
  active       Boolean  @default(true)
  headId       String?
  head         Users?   @relation("UserToHead", fields: [headId], references: [id])
  subordinates Users[]  @relation("UserToHead")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  auth         Auth[]   @relation(name: "auth")
}

enum UserRole {
  ADMIN
  MANAGER
  SUPERVISER
  CAHIER
  FLOORMANGER
  WORKER
}

model Categories {
  id        String     @id @unique @default(uuid())
  name      String
  products  Products[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Products {
  id                  String                @id @default(uuid())
  name                String
  price               Float
  categoryId          String
  categories          Categories            @relation(fields: [categoryId], references: [id])
  ProvidersToProducts ProvidersToProducts[]
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model Clients {
  id          String   @id @unique @default(uuid())
  firstname   String
  lastname    String
  phoneNumber String
  total       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Providers {
  id                  String                @id @unique @default(uuid())
  name                String
  phoneNumber         String
  ProvidersToProducts ProvidersToProducts[]
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
}

model ProvidersToProducts {
  id         String    @id @unique @default(uuid())
  providerId String
  provider   Providers @relation(fields: [providerId], references: [id])
  productId  String
  products   Products  @relation(fields: [productId], references: [id])

  @@unique([productId, providerId])
}
